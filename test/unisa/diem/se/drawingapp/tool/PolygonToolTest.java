/**
 * SE_DrawingApplication
 * 
 * Group members:
 *  ⋅ Amato Emilio
 *  ⋅ Apicella Salvatore
 *  ⋅ Bove Antonio
 *  ⋅ Cerasuolo Cristian
 */

package unisa.diem.se.drawingapp.tool;

import java.util.ArrayList;
import java.util.List;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Polyline;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import unisa.diem.se.drawingapp.controller.DrawingSurfaceManager;
import unisa.diem.se.drawingapp.utility.UtilityTest;

public class PolygonToolTest {

    private  Pane drawingPane;
    private  PolygonTool polygonTool;
    private  ObjectProperty strokeColor;
    private  ObjectProperty fillColor;
    private  List<Double> coordinates;
    private final int NUM_POINTS = 8;
    private final int OFFSET = 5;
    
    @Before
    public void setUp() {
        
        this.drawingPane = UtilityTest.createAndSetPane();
        this.strokeColor = new ReadOnlyObjectWrapper(UtilityTest.STROKE_COLOR);
        this.fillColor = new ReadOnlyObjectWrapper(UtilityTest.FILL_COLOR);
        this.polygonTool = new PolygonTool(this.strokeColor, this.fillColor);
        this.coordinates = new ArrayList<>();
        
        //Polygon of points: (10,10), (10,20), (20,20), (20,10) 
        for(int i = 0; i < this.NUM_POINTS; i++){
            if(i < 3 || i == 7){
                this.coordinates.add(10.0);
            }
            else
                this.coordinates.add(20.0);
        }
        
        DrawingSurfaceManager.getInstance().getShapes().clear();
    }

    /**
     * Test of onMouseDown method, of class PolygonTool.
     */
    @Test
    public void testOnMouseDown() {
        System.out.println("onMouseDown");
        
        //TEST: click on a defined point, setting start point and next point -> expected a polygon shape on pane, with start coordinate equals to setted coordinate in mouse event
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(0), this.coordinates.get(1),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        assertEquals(1, this.drawingPane.getChildren().size());
        
        Polyline polygon = (Polyline) this.drawingPane.getChildren().get(0);
        
        assertEquals(this.strokeColor.getValue(), polygon.getStroke());
        assertEquals(this.fillColor.getValue(), polygon.getFill());   
        assertEquals(polygon.getPoints().get(0), this.coordinates.get(0), UtilityTest.EPSILON);
        assertEquals(polygon.getPoints().get(1), this.coordinates.get(1), UtilityTest.EPSILON);
        
    }

    /**
     * Test of onMouseDrag method, of class PolygonTool.
     */
    @Test
    public void testOnMouseDrag() {
        System.out.println("onMouseDrag");
        
        //TEST: click on a defined point, setting start point and next point then drag to a secondary point -> expected a polygon with two points equals to start point generated by
        // onMouseDown event and secondary point generated by onMouseDrag event
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(0), this.coordinates.get(1),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(2), this.coordinates.get(3),MouseButton.PRIMARY, MouseEvent.MOUSE_DRAGGED);
        
        assertEquals(1, this.drawingPane.getChildren().size());
        
        Polyline polygon = (Polyline) this.drawingPane.getChildren().get(0);
        
        assertEquals(polygon.getPoints().get(0), this.coordinates.get(0), UtilityTest.EPSILON);
        assertEquals(polygon.getPoints().get(1), this.coordinates.get(1), UtilityTest.EPSILON);
        assertEquals(polygon.getPoints().get(2), this.coordinates.get(2), UtilityTest.EPSILON);
        assertEquals(polygon.getPoints().get(3), this.coordinates.get(3), UtilityTest.EPSILON);
        
    }

    /**
     * Test of testOnMouseUpInSamePointWithTwoPoints method, of class PolygonTool.
     */
    @Test
    public void testOnMouseUpInSamePointWithTwoPoints() {
        System.out.println("onMouseUpInSamePointWithTwoPoints");
        
        //TEST: onMouseUp, drag and release on the same point -> shape not added in the pane
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(0), this.coordinates.get(1),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(0), this.coordinates.get(1),MouseButton.PRIMARY, MouseEvent.MOUSE_DRAGGED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(0), this.coordinates.get(1),MouseButton.PRIMARY, MouseEvent.MOUSE_RELEASED);
        
        assertEquals(0, this.drawingPane.getChildren().size());
       
    }
    
    
    /**
     * Test of testOnMouseUpNearStartingPointWithThreeOrMorePoint method, of class PolygonTool.
     */    
    @Test
    public void testOnMouseUpNearStartingPointWithThreeOrMorePoints(){
        System.out.println("onMouseUpNearStartingPointWithThreeOrMorePoints");
        
        //TEST: create a shape with given point generated by mouse event press, drag and release , adding last point near but not on starting point -> expected a shape with points given by
        //event coordinate generated by mouse event and closed, due to the automatic closing generated when the end point is within 8 pixels from the origin point 
        
        double offsetFromStartingPointx = this.coordinates.get(0) - this.OFFSET; 
        double offsetFromStartingPointy = this.coordinates.get(1) - this.OFFSET;
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(0), this.coordinates.get(1),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(2), this.coordinates.get(3),MouseButton.PRIMARY, MouseEvent.MOUSE_DRAGGED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(2), this.coordinates.get(3),MouseButton.PRIMARY, MouseEvent.MOUSE_RELEASED);
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(2), this.coordinates.get(3),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(4), this.coordinates.get(5),MouseButton.PRIMARY, MouseEvent.MOUSE_DRAGGED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(4), this.coordinates.get(5),MouseButton.PRIMARY, MouseEvent.MOUSE_RELEASED);
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(4), this.coordinates.get(5),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(6), this.coordinates.get(7),MouseButton.PRIMARY, MouseEvent.MOUSE_DRAGGED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(6), this.coordinates.get(7),MouseButton.PRIMARY, MouseEvent.MOUSE_RELEASED);
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(6), this.coordinates.get(7),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, offsetFromStartingPointx, offsetFromStartingPointy,MouseButton.PRIMARY, MouseEvent.MOUSE_DRAGGED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, offsetFromStartingPointx, offsetFromStartingPointy,MouseButton.PRIMARY, MouseEvent.MOUSE_RELEASED);        
        
        assertEquals(1, this.drawingPane.getChildren().size());
        Polyline polygon = (Polyline) this.drawingPane.getChildren().get(0);
        
        for(int i = 0; i < this.NUM_POINTS; i++)
            assertEquals(polygon.getPoints().get(i),this.coordinates.get(i), UtilityTest.EPSILON);
        
        //Ending point equals to starting point -> the shape is correctly closed
        assertEquals(polygon.getPoints().get(polygon.getPoints().size()-2), this.coordinates.get(0), UtilityTest.EPSILON);
        assertEquals(polygon.getPoints().get(polygon.getPoints().size()-1), this.coordinates.get(1), UtilityTest.EPSILON);
        
    }


    /**
     * Test of testOnMouseUp method, of class PolygonTool.
     */       
    @Test
    public void testOnMouseUp(){
        System.out.println("onMouseUp");
        //TEST: create a shape with given point generated by mouse event press, drag and release , adding last point far from starting point -> expected a shape with points given by
        //event coordinate generated by mouse event and open */
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(0), this.coordinates.get(1),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(2), this.coordinates.get(3),MouseButton.PRIMARY, MouseEvent.MOUSE_DRAGGED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(2), this.coordinates.get(3),MouseButton.PRIMARY, MouseEvent.MOUSE_RELEASED);
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(2), this.coordinates.get(3),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(4), this.coordinates.get(5),MouseButton.PRIMARY, MouseEvent.MOUSE_DRAGGED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(4), this.coordinates.get(5),MouseButton.PRIMARY, MouseEvent.MOUSE_RELEASED);
        
        assertEquals(1, this.drawingPane.getChildren().size());
        Polyline polygon = (Polyline) this.drawingPane.getChildren().get(0);

        assertEquals(polygon.getPoints().get(polygon.getPoints().size()-2), this.coordinates.get(4), UtilityTest.EPSILON);
        assertEquals(polygon.getPoints().get(polygon.getPoints().size()-1), this.coordinates.get(5), UtilityTest.EPSILON);
        
    }

    /**
     * Test of complete method, of class PolygonTool.
     */
    @Test
    public void testComplete() {
        System.out.println("complete");

        //TEST: create a shape with given point generated by mouse event press, drag and release , adding last point far from starting point -> expected a shape with points given by
        //event coordinate generated by mouse event and closed, becasue of the work is complete by complete method */
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(0), this.coordinates.get(1),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(2), this.coordinates.get(3),MouseButton.PRIMARY, MouseEvent.MOUSE_DRAGGED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(2), this.coordinates.get(3),MouseButton.PRIMARY, MouseEvent.MOUSE_RELEASED);
        
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(2), this.coordinates.get(3),MouseButton.PRIMARY, MouseEvent.MOUSE_PRESSED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(4), this.coordinates.get(5),MouseButton.PRIMARY, MouseEvent.MOUSE_DRAGGED);
        UtilityTest.mouseEvent(this.polygonTool,this.drawingPane, null, this.coordinates.get(4), this.coordinates.get(5),MouseButton.PRIMARY, MouseEvent.MOUSE_RELEASED);
        
        this.polygonTool.complete();
        assertEquals(1, this.drawingPane.getChildren().size());
        Polyline polygon = (Polyline) this.drawingPane.getChildren().get(0);
        
        //Ending point equals to starting point -> the shape is correctly closed -> the work is completed
        assertEquals(polygon.getPoints().get(polygon.getPoints().size()-2), this.coordinates.get(0), UtilityTest.EPSILON);
        assertEquals(polygon.getPoints().get(polygon.getPoints().size()-1), this.coordinates.get(1), UtilityTest.EPSILON);
        
    }


}
